name: Release
on:
  release:
    types: [published]
permissions:
  contents: write
  id-token: write
  attestations: write
  packages: write
jobs:
  build-and-publish-buildpack:
    runs-on: ubuntu-24.04
    outputs:
      assets: ${{ steps.publish-cnb.outputs.assets }}
    steps:
      - uses: actions/checkout@v4
      - name: Package Buildpack
        run: make package version="${{ github.event.release.tag_name }}"
      - name: Publish Buildpack
        uses: softprops/action-gh-release@v2
        id: publish-cnb
        with:
          files: build/*
  push-to-ghcr:
    needs: build-and-publish-buildpack
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Parse Event
        id: event
        run: |
          FULL_VERSION="$(echo ${{ github.event.release.tag_name }} | sed s/^v//)"
          MINOR_VERSION="$(echo "${FULL_VERSION}" | awk -F '.' '{print $1 "." $2 }')"
          MAJOR_VERSION="$(echo "${FULL_VERSION}" | awk -F '.' '{print $1 }')"
          echo "tag_full=${FULL_VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag_minor=${MINOR_VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag_major=${MAJOR_VERSION}" >> "$GITHUB_OUTPUT"
          echo "download_cnb_url=$(echo '${{needs.build-and-publish-buildpack.outputs.assets}}'|jq -r '.[]| select(.name | endswith(".cnb")) | .url')" >> "$GITHUB_OUTPUT"
          echo "download_tgz_url=$(echo '${{needs.build-and-publish-buildpack.outputs.assets}}'|jq -r '.[]| select(.name | endswith(".tgz")) | .url')" >> "$GITHUB_OUTPUT"

      - name: Download .cnb buildpack
        uses: paketo-buildpacks/github-config/actions/release/download-asset@main
        with:
          url: ${{ steps.event.outputs.download_cnb_url }}
          output: "/github/workspace/buildpackage.cnb"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download .tgz buildpack
        uses: paketo-buildpacks/github-config/actions/release/download-asset@main
        with:
          url: ${{ steps.event.outputs.download_tgz_url }}
          output: "/github/workspace/buildpack.tgz"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate version
        run: |
          buidpackTomlVersion=$(sudo skopeo inspect "oci-archive:${GITHUB_WORKSPACE}/buildpackage.cnb" | jq -r '.Labels."io.buildpacks.buildpackage.metadata" | fromjson | .version')
          githubReleaseVersion="${{ steps.event.outputs.tag_full }}"
          if [[ "$buidpackTomlVersion" != "$githubReleaseVersion" ]]; then
            echo "Version in buildpack.toml ($buidpackTomlVersion) and github release ($githubReleaseVersion) are not identical"
            exit 1
          fi

      - id: lowercase-repo-name
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY@L}" >> "${GITHUB_ENV}"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GHCR
        id: push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
        run: |
          IMAGE="ghcr.io/${REPO_NAME}/vscodium"
          echo "${GITHUB_TOKEN}" | sudo skopeo login --username "${{github.actor}}" --password-stdin ghcr.io
          ./scripts/publish.sh \
            --archive-path ${GITHUB_WORKSPACE}/buildpack.tgz \
            --buildpack-type buildpack \
            --image-ref "${IMAGE}:${{ steps.event.outputs.tag_full }}"
          sudo skopeo copy "docker://${IMAGE}:${{ steps.event.outputs.tag_full }}" "docker://${IMAGE}:${{ steps.event.outputs.tag_minor }}" --multi-arch all
          sudo skopeo copy "docker://${IMAGE}:${{ steps.event.outputs.tag_full }}" "docker://${IMAGE}:${{ steps.event.outputs.tag_major }}" --multi-arch all
          sudo skopeo copy "docker://${IMAGE}:${{ steps.event.outputs.tag_full }}" "docker://${IMAGE}:latest" --multi-arch all
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "digest=$(sudo skopeo inspect "oci-archive:${GITHUB_WORKSPACE}/buildpackage.cnb" | jq -r .Digest)" >> $GITHUB_OUTPUT
