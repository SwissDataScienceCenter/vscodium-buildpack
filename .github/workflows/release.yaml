name: Release
on:
  release:
    types: [published]
permissions:
  contents: write
  id-token: write
  attestations: write
  packages: write
jobs:
  build-and-publish-buildpack:
    runs-on: ubuntu-24.04
    outputs:
      assets: ${{ steps.publish-cnb.outputs.assets }}
    steps:
      - uses: actions/checkout@v4
      - name: Package Buildpack
        run: make package version="${{ github.event.release.tag_name }}"
      - name: Publish Buildpack
        uses: softprops/action-gh-release@v2
        id: publish-cnb
        with:
          files: build/*
  push-to-ghcr:
    needs: build-and-publish-buildpack
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Parse Event
        id: event
        run: |
          FULL_VERSION="$(echo ${{ github.event.release.tag_name }} | sed s/^v//)"
          MINOR_VERSION="$(echo "${FULL_VERSION}" | awk -F '.' '{print $1 "." $2 }')"
          MAJOR_VERSION="$(echo "${FULL_VERSION}" | awk -F '.' '{print $1 }')"
          echo "tag_full=${FULL_VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag_minor=${MINOR_VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag_major=${MAJOR_VERSION}" >> "$GITHUB_OUTPUT"
          echo "download_url=$(echo '${{needs.build-and-publish-buildpack.outputs.assets}}'|jq -r '.[]| select(.name | endswith(".cnb")) | .url')" >> "$GITHUB_OUTPUT"      
      - name: download
        id: download
        uses: paketo-buildpacks/github-config/actions/release/download-asset@main
        with:
          url: ${{ steps.event.outputs.download_url }}
          output: "/github/workspace/buildpackage.cnb"
          token: ${{ secrets.RENKUBOT_GITHUB_TOKEN }}      
      - name: Validate version
        run: |
          buidpackTomlVersion=$(sudo skopeo inspect "oci-archive:${GITHUB_WORKSPACE}/buildpackage.cnb" | jq -r '.Labels."io.buildpacks.buildpackage.metadata" | fromjson | .version')
          githubReleaseVersion="${{ steps.event.outputs.tag_full }}"
          if [[ "$buidpackTomlVersion" != "$githubReleaseVersion" ]]; then
            echo "Version in buildpack.toml ($buidpackTomlVersion) and github release ($githubReleaseVersion) are not identical"
            exit 1
          fi        
      - id: lowercase-repo-name
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY@L}" >> "${GITHUB_ENV}"
      - name: Push to GHCR
        id: push
        env:
          RENKUBOT_GITHUB_TOKEN: ${{ secrets.RENKUBOT_GITHUB_TOKEN }}
        run: |
          echo "${RENKUBOT_GITHUB_TOKEN}" | sudo skopeo login --username RenkuBot --password-stdin ghcr.io
          sudo skopeo copy "oci-archive:${GITHUB_WORKSPACE}/buildpackage.cnb" "docker://ghcr.io/${REPO_NAME}:${{ steps.event.outputs.tag_full }}"
          sudo skopeo copy "oci-archive:${GITHUB_WORKSPACE}/buildpackage.cnb" "docker://ghcr.io/${REPO_NAME}:${{ steps.event.outputs.tag_minor }}"
          sudo skopeo copy "oci-archive:${GITHUB_WORKSPACE}/buildpackage.cnb" "docker://ghcr.io/${REPO_NAME}:${{ steps.event.outputs.tag_major }}"
          sudo skopeo copy "oci-archive:${GITHUB_WORKSPACE}/buildpackage.cnb" "docker://ghcr.io/${REPO_NAME}:latest"
          echo "image=${REPO_NAME}" >> "$GITHUB_OUTPUT"
          echo "digest=$(sudo skopeo inspect "oci-archive:${GITHUB_WORKSPACE}/buildpackage.cnb" | jq -r .Digest)" >> $GITHUB_OUTPUT
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.push.outputs.image }}
          subject-digest: ${{ steps.push.outputs.digest}}
          push-to-registry: true
          token: ${{ secrets.RENKUBOT_GITHUB_TOKEN}}
